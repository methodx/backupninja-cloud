## Backupninja handler for uploading backups to Cloud Storage
## Based on duplicity handler (dup and dup.helper)
## Written by Egor (methodx@aylium.net)


HELPERS="$HELPERS csdup:cloud_storage_incremental_encrypted_backup"

## Functions
## No default values anymore

do_csdup_host_includes() {
   set -o noglob

## Choose files to include into backup

   REPLY=
   while [ -z "$REPLY" ]; do
      formBegin "$csdup_title - host system: includes"
         [ -z "$csdup_includes" ] && csdup_includes="$csdup_default_includes"
         for i in $csdup_includes; do
            formItem include "$i"
         done
         formItem include ""
         formItem include ""
         formItem include ""
         formItem include ""
         formItem include ""
         formItem include ""
         formItem include ""
         formItem include ""
         formDisplay
      [ $? = 0 ] || return 1
      csdup_includes="$REPLY"
   done
   set +o noglob
}

do_csdup_vserver() {
   # choose the vservers to backup (into $selected_vservers)
   choose_one_or_more_vservers "$csdup_title"
   [ $? = 0 ] || return 1

   set -o noglob
   REPLY=
   while [ -z "$REPLY" ]; do
      formBegin "$csdup_title - vservers: vsincludes (backup these directories from every selected vserver)"
         [ -z "$csdup_vsincludes" ] && csdup_vsincludes="$csdup_default_includes"
         for i in $csdup_vsincludes; do
            formItem include "$i"
         done
         formItem include ""
         formItem include ""
         formItem include ""
         formItem include ""
         formItem include ""
         formItem include ""
         formItem include ""
         formItem include ""
      formDisplay
      [ $? = 0 ] || return 1
      csdup_vsincludes="$REPLY"
   done
   set +o noglob
}

## Exclude files from backup

do_csdup_excludes() {
   set -o noglob
   formBegin "$csdup_title: excludes"
     [ -z "$csdup_excludes" ] && csdup_excludes="$csdup_default_excludes"
     for i in $csdup_excludes; do
        formItem exclude "$i"
     done
     formItem exclude "**.bash_history"
     formItem exclude ""
     formItem exclude ""
     formItem exclude ""
     formItem exclude ""
     formItem exclude ""
     formItem exclude ""
     formItem exclude ""
   formDisplay
   [ $? = 0 ] || return 1
   csdup_excludes="$REPLY"
   set +o noglob
}

## Choose Source files

do_csdup_src() {
   choose_host_or_vservers_or_both "$csdup_title"
   [ $? = 0 ] || return 1
   case $host_or_vservers in
      'host')
         do_csdup_host_includes
         [ $? = 0 ] || return 1
         ;;
      'vservers')
         do_csdup_vserver
         [ $? = 0 ] || return 1
         ;;
      'both')
         do_csdup_host_includes
         [ $? = 0 ] || return 1
         do_csdup_vserver
         [ $? = 0 ] || return 1
         ;;
      *)
         return 1
         ;;
   esac
   do_csdup_excludes
   [ $? = 0 ] || return 1

   _cssrc_done="(DONE)"
   setDefault dest
}

## Cloud Storage connection options.
## Consider first 4 values as default

do_csdup_url() {

   local replyconverted
   local thereply

   set -o noglob
   REPLY=
   while [ -z "$REPLY" -o -z "$csdup_storageid" -o -z "$csdup_apikey" -o -z "$csdup_cont" -o -z "$csdup_name" ]; do
      formBegin "$csdup_title - destination: first four items are compulsory"
        formItem "storage" "$csdup_storageid"
	formItem "apikey" "$csdup_apikey"
	formItem "container" "$csdup_cont"
	formItem "name" "$csdup_name"
        formItem "keep" "$csdup_keep"
	formItem "incremental" "$csdup_incremental"
        formItem "increments" "$csdup_increments"
        formItem "keepincroffulls" "$csdup_keepincroffulls"
        formItem "bandwidthlimit" "$csdup_bandwidth"
      formDisplay
      [ $? = 0 ] || return 1

      IFS=$''
      replyconverted=`echo $REPLY | tr '\n' :`
	IFS=$':'
      thereply=($replyconverted)
      IFS=$' \t\n'

      csdup_storageid=${thereply[0]}
      csdup_apikey=${thereply[1]}
      csdup_cont=${thereply[2]}
      csdup_name=${thereply[3]}
      csdup_keep=${thereply[4]}
      csdup_incremental=${thereply[5]}
      csdup_increments=${thereply[6]}
      csdup_keepincroffulls=${thereply[7]}
      csdup_bandwidth=${thereply[8]}

   done
   set +o noglob

   _csdest_done="(DONE)"
   _csurl_done="(DONE)"
   setDefault gpg
}

## GPG section
## Right now I do not recommend you to use this feature, so I'll comment it out
#########################
##
##do_csdup_gpg_encryptkey() {
##   REPLY=
##   while [ -z "$REPLY" -o -z "$csdup_gpg_encryptkey" ]; do
##      inputBox "$csdup_title - GnuPG" "Enter ID of the public GnuPG key to be used to encrypt the backups:" "$csdup_gpg_encryptkey"
##      [ $? = 0 ] || return 1
##      csdup_gpg_encryptkey="$REPLY"
##   done
##}
##
##do_csdup_gpg_sign() {
##   # sign ?
##   booleanBox "$csdup_title - GnuPG" "Sign the backups?" "$csdup_gpg_sign"
##   if [ $? = 0 ]; then
##      csdup_gpg_sign=yes
##   else
##      csdup_gpg_sign=no
##   fi
##}
##
##do_csdup_gpg_signkey() {
##   # one key pair ?
##   booleanBox "$dup_title - GnuPG" "Use the same GnuPG key pair for encryption and signing?" "$csdup_gpg_onekeypair"
##   if [ $? = 0 ]; then
##      csdup_gpg_onekeypair=yes
##   else
##      csdup_gpg_onekeypair=no
##   fi
##
##   if [ "$csdup_gpg_onekeypair" == "no" ]; then
##      # signkey ?
##      REPLY=
##      while [ -z "$REPLY" -o -z "$dup_gpg_signkey" ]; do
##         inputBox "$csdup_title - GnuPG" "Enter the ID of the private GnuPG key to be used to sign the backups:" "$csdup_gpg_signkey"
##         [ $? = 0 ] || return 1
##         csdup_gpg_signkey="$REPLY"
##      done
##   fi
##}
############################
do_csdup_gpg_passphrase() {
   local question="Enter the passphrase needed to unlock the GnuPG key:"
   REPLY=
   while [ -z "$REPLY" -o -z "$csdup_gpg_password" ]; do
      passwordBox "$csdup_title - GnuPG" "$question"
      [ $? = 0 ] || return 1
      csdup_gpg_password="$REPLY"
   done
}

do_csdup_gpg() {
##
##   # symmetric or public key encryption ?
##  booleanBox "$csdup_title - GnuPG" "Use public key encryption? Otherwise, symmetric encryption will be used, and data signing will be impossible." "$csdup_gpg_asymmetric_encryption"
##  if [ $? = 0 ]; then
##     csdup_gpg_asymmetric_encryption=yes
##  else
     csdup_gpg_asymmetric_encryption=no
##  fi
##
##   # when using public/private key pair encryption, ask for the keys to use
##   if [ "$csdup_gpg_asymmetric_encryption" == yes ]; then
##      do_csdup_gpg_encryptkey ; [ $? = 0 ] || return 1
##      do_csdup_gpg_sign ; [ $? = 0 ] || return 1
##      if [ "$csdup_gpg_sign" == yes ]; then
##         do_csdup_gpg_signkey ; [ $? = 0 ] || return 1
##      fi
##   else
##
      csdup_gpg_sign=no
##   fi
## # a passphrase is always needed
do_csdup_gpg_passphrase

   _csgpg_done="(DONE)"
   setDefault adv
}

do_csdup_conn() {
   _cscon_done="(DONE)"
   setDefault adv
}

## Misc options section
## Also, leave default values

do_csdup_misc_options() {

   set -o noglob
   local replyconverted
   local thereply

   formBegin "$csdup_title - misc. options"
     formItem "nicelevel" "$csdup_nicelevel"
     formItem "testconnect" "$csdup_testconnect"
     formItem "options" "$csdup_options"
   formDisplay
   [ $? = 0 ] || return 1

   IFS=$''
   replyconverted=`echo $REPLY | tr '\n' :`
   IFS=$':'
   thereply=($replyconverted)
   IFS=$' \t\n'

   csdup_nicelevel=${thereply[0]}
   csdup_testconnect=${thereply[1]}
   csdup_options=${thereply[2]}

   set +o noglob
}


do_csdup_adv() {
   do_csdup_misc_options
   [ $? = 0 ] || return 1
   _csadv_done="(DONE)"
   setDefault finish
}

do_csdup_finish() {
   	get_next_filename $configdirectory/$csdup_name.csdup
	cat > $next_filename <<EOF
options = $csdup_options
nicelevel = $csdup_nicelevel
testconnect = $csdup_testconnect

[gpg]
sign = $csdup_gpg_sign
encryptkey = $csdup_gpg_encryptkey
signkey = $csdup_gpg_signkey
password = $csdup_gpg_password

[source]

EOF

   if [ "$host_or_vservers" == host -o "$host_or_vservers" == both ]; then
      set -o noglob
      for i in $csdup_includes; do
         echo "include = $i" >> $next_filename
      done
      set +o noglob
   fi

   cat >> $next_filename <<EOF

EOF

   if [ "$host_or_vservers" == vservers -o "$host_or_vservers" == both ]; then
      set -o noglob
      echo -e "vsnames = $selected_vservers\n" >> $next_filename
      for i in $dup_vsincludes; do
         echo "vsinclude = $i" >> $next_filename
      done
      set +o noglob
   fi

   cat >> $next_filename <<EOF

# Files to exclude from backup

EOF
    set -o noglob
    for i in $csdup_excludes; do
        echo "exclude = $i" >> $next_filename
    done
    set +o noglob

    cat >> $next_filename <<EOF

[dest]

incremental = $csdup_incremental
increments = $csdup_increments
keep = $csdup_keep
keepincroffulls = $csdup_keepincroffulls
desturl = cf+http://$csdup_cont
bandwidthlimit = $csdup_bandwidth

## Clodo Cloud Storage credentials

csdup_storageid=$csdup_storageid
csdup_apikey=$csdup_apikey

EOF

    chmod 600 $next_filename

###
# Export restoration file
###
	get_next_filename /root/.csrestore/$csdup_name.csdup
	cat > $next_filename << EOF

#!/bin/bash

## Task name
csdup_name=$csdup_name

## Container name
csdup_cont=$csdup_cont

## Cloud Storage Credentials
export CLOUDFILES_USERNAME=$csdup_storageid
export CLOUDFILES_APIKEY=$csdup_apikey
export PASSPHRASE=$csdup_gpg_password
export CLOUDFILES_AUTHURL=https://api.clodo.ru
export CLOUDFILES_CONTAINER=$csdup_cont


EOF

	chmod 600 $next_filename
}

csdup_main_menu() {

   while true; do
      cssrcitem="choose files to include & exclude $_cssrc_done"
      csdestitem="configure backup destination $_csdest_done"
      csgpgitem="configure GnuPG encryption/signing $_csgpg_done"
      csconitem="set up ssh keys and test remote connection $_cscon_done"
      csadvitem="edit advanced settings $_csadv_done"
      menuBox "$csdup_title" "choose a step:" \
         src "$cssrcitem" \
         dest "$csdestitem" \
         gpg "$csgpgitem" \
         adv "$csadvitem" \
         finish "finish and create config file"
      [ $? = 0 ] || return 1
      result="$REPLY"

      case "$result" in
         "src") do_csdup_src;;
         "dest") do_csdup_url;;
         "gpg") do_csdup_gpg;;
         # TODO: enable the following when do_dup_conn is written
         # "conn") do_csdup_conn;;
         "adv") do_csdup_adv;;
         "finish")
            if [[ "$_csurl_done$_csgpg_done$_cssrc_done" != "(DONE)(DONE)(DONE)" ]]; then
               msgBox "$csdup_title" "You cannot create the configuration file until the four first steps are completed."
            else
               do_csdup_finish
               break
            fi
            ;;
      esac

   done
}

### Main function

csdup_wizard() {

   require_packages duplicity

   # Global variables
   csdup_title="Duplicity action wizard [Clodo Cloud Storage]"
   _cssrc_done=
   _csurl_done=
   _cscon_done=
   _csgpg_done=
   _csadv_done=
   csdup_storageid=
   csdup_apikey=
   csdup_includes=
   csdup_excludes=
   csdup_vsincludes=
   csdup_incremental=yes
   csdup_increments=30
   csdup_keep=60
   csdup_keepincroffulls=
   csdup_bandwidth=
   csdup_sshoptions=
   csdup_destdir=$csdup_cont
   csdup_destuser="`whoami`"
   csdup_gpg_asymmetric_encryption="yes"
   csdup_gpg_encryptkey=""
   csdup_gpg_sign="no"
   csdup_gpg_onekeypair="yes"
   csdup_gpg_signkey=""
   csdup_gpg_password=""
   csdup_nicelevel=19
   csdup_testconnect=no
   csdup_options=

   # Global variables whose '*' shall not be expanded
   set -o noglob
   csdup_default_includes=""
   csdup_default_excludes=""
   set +o noglob


   csdup_main_menu
}
